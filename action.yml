name: Compile Checklists

inputs:
  checklists_directory:
    description: 'The directory containing the checklist JSON files'
    type: string
    required: false
    default: 'checklists'
  compiler_output_directory:
    description: 'The directory where the compiled checklists will be saved'
    type: string
    required: false
    default: 'artifacts'
  release_directory:
    description: 'The directory where the final release artifacts will be saved'
    type: string
    required: false
    default: 'output-release'
  create_release:
    description: 'Whether to create a GitHub release'
    type: boolean
    required: false
    default: true
  efis_editor_repository:
    description: 'The repository containing the efis-editor'
    type: string
    required: false
    default: 'rdamazio/efis-editor'
  efis_editor_ref:
    description: 'The branch, tag or SHA to checkout from the efis-editor repository'
    type: string
    required: false
    default: 'main'
  efis_editor_patch:
    description: 'The patch to apply to the efis-editor'
    type: string
    required: false
  formats:
    description: 'A comma-separated list of FormatIds to compile.'
    type: string
    required: false
  pdf_output_group_heading:
    description: 'PDF: Whether to output group headings'
    type: boolean
    required: false
    default: false
  pdf_max_indented_text_height:
    description: 'PDF: Maximum height for indented text items'
    type: number
    required: false
    default: 40
  pdf_color_heading:
    description: 'PDF: Color for headings'
    type: string
    required: false
    default: '#0000FF'
  pdf_color_emergency:
    description: 'PDF: Color for emergency items'
    type: string
    required: false
    default: '#FF0000'
  pdf_color_abnormal:
    description: 'PDF: Color for abnormal items'
    type: string
    required: false
    default: '#CF3400'
  pdf_font_size:
    description: 'PDF: Font size for text'
    type: number
    required: false
    default: 9

runs:
  using: 'composite'
  steps:
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'

    - name: Copy a file
      run: cp -r ${{github.action_path}} _action
      shell: bash

    - name: Checkout EFIS file format editor repository
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.efis_editor_repository }}
        ref: ${{ inputs.efis_editor_ref }}
        path: _action/efis-editor

    - name: Install efis-editor dependencies
      run: npm install
      working-directory: _action/efis-editor
      shell: bash

    - name: Patch EFIS-editor with specific changes
      run: git apply ../efis-editor.patch
      working-directory: _action/efis-editor
      shell: bash

    - name: Generate efis-editor protobuf files
      run: npm run genproto
      working-directory: _action/efis-editor
      shell: bash

    - name: Generate efis-editor keys
      run: npm run genkeys
      working-directory: _action/efis-editor
      shell: bash

    - name: Install compiler dependencies
      run: npm install
      working-directory: _action/compiler
      shell: bash

    - name: Compile Compiler Typescript
      working-directory: _action/efis-editor
      run: npx tsc ../compiler/*.ts --module commonjs --esModuleInterop --target es2022 --lib es2022,dom --skipLibCheck
      shell: bash

    - name: Convert Checklist JSONs to EFIS
      run: |
        ARGS="--checklistsDir=${{ inputs.checklists_directory }} --outputRootDir=${{ inputs.compiler_output_directory }}"
        if [ -n "${{ inputs.formats }}" ]; then
          ARGS="$ARGS --formats=${{ inputs.formats }}"
        fi
        ARGS="$ARGS --pdfOutputGroupHeading=${{ inputs.pdf_output_group_heading }}"
        ARGS="$ARGS --pdfMaxIndentedTextHeight=${{ inputs.pdf_max_indented_text_height }}"
        ARGS="$ARGS --pdfColorHeading='${{ inputs.pdf_color_heading }}'"
        ARGS="$ARGS --pdfColorEmergency='${{ inputs.pdf_color_emergency }}'"
        ARGS="$ARGS --pdfColorAbnormal='${{ inputs.pdf_color_abnormal }}'"
        ARGS="$ARGS --pdfFontSize=${{ inputs.pdf_font_size }}"
        node _action/compiler/compiler.js $ARGS
      shell: bash
      working-directory: .

    - name: Setup gh actions artifact client
      uses: lhotari/gh-actions-artifact-client@v2

    - name: Prepare artifacts
      id: upload
      run: |
        mkdir ${{ inputs.release_directory }}
        find ${{ inputs.compiler_output_directory }} -type f | while read -r file; do
          name=${file##*${{ inputs.checklists_directory }}/}
          final_name=${name//\//\.}
          echo "Uploading $name, file: $final_name"
          cp "$file" "${{ inputs.release_directory }}/$final_name"
        done
        echo "name=artifact_path::${{ inputs.release_directory }}" >> $GITHUB_OUTPUT
      shell: bash
      working-directory: .

    - name: 'Upload Artifacts'
      id: artifact-upload-step
      uses: actions/upload-artifact@v4
      with:
        name: compiled-checklists
        path: ${{ inputs.compiler_output_directory }}

    - name: Prepare PR comment
      if: github.event_name == 'pull_request'
      run: |
        echo "<!-- create-or-update-comment -->" > comment-body.md
        echo "### âœ… Checklists Compilation" >> comment-body.md
        echo "" >> comment-body.md
        echo "- [View full build log](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> comment-body.md
        echo "- [Download compiled checklists](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.artifact-upload-step.outputs.artifact-id }})" >> comment-body.md
        echo "" >> comment-body.md
      shell: bash
      working-directory: .

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body-path: comment-body.md

    - uses: 'softprops/action-gh-release@v2'
      if: github.ref == 'refs/heads/main' && inputs.create_release == 'true'
      with:
        tag_name: 'latest'
        name: 'Automatic Release Build'
        make_latest: true
        body_path: 'output.md'
        files: |
          ${{ inputs.release_directory }}/*
